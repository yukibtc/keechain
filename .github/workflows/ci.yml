name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: cargo fmt --all -- --config format_code_in_doc_comments=true --check

  build-core:
    name: Build CORE
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - version: stable # Stable
          - version: 1.63.0 # MSRV
        build-args:
          [
            "-p keechain-core --no-default-features",
            "-p keechain-core",
            "-p keechain-core --target wasm32-unknown-unknown"
          ]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-wasm32-${{ hashFiles('**/Cargo.toml','**/Cargo.lock') }}
    - name: Set default toolchain
      run: rustup default ${{ matrix.rust.version }}
    - name: Add WASM
      if: ${{ matrix.build-args == '-p keechain-core --target wasm32-unknown-unknown' }}
      run: rustup target add wasm32-unknown-unknown
    - name: Set profile
      run: rustup set profile minimal && rustup component add clippy
    - name: Build
      run: cargo build ${{ matrix.build-args }}
    - name: Clippy
      run: cargo clippy ${{ matrix.build-args }} -- -D warnings  

  build:
    name: Build FFI, CLI and GUI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - version: stable # Stable
        build-args:
          [
            "-p keechain-ffi",
            "-p keechain-cli",
            "-p keechain",
          ]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml','**/Cargo.lock') }}
    - name: Install GUI dependencies
      if: ${{ matrix.build-args == '-p keechain' }}
      run: sudo apt update && sudo apt install -y build-essential libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev
    - name: Set default toolchain
      run: rustup default ${{ matrix.rust.version }}
    - name: Set profile
      run: rustup set profile minimal && rustup component add clippy
    - name: Build
      run: cargo build ${{ matrix.build-args }}
    - name: Tests
      run: cargo test ${{ matrix.build-args }}
    - name: Clippy
      run: cargo clippy ${{ matrix.build-args }} -- -D warnings